package br.com.gabrieldev.ecommercelog.controller;

import br.com.gabrieldev.ecommercelog.domain.dto.LogDTO;
import br.com.gabrieldev.ecommercelog.domain.type.LogType;
import br.com.gabrieldev.ecommercelog.service.LogService;
import lombok.RequiredArgsConstructor;
import org.springframework.core.io.InputStreamResource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

/**
 * This class holds all endpoints those work with logs
 *
 * @author Gabriel Guimarães de Almeida
 * */
@CrossOrigin
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/log")
public class LogController {

    private final LogService logService;

    /**
     * GET: /api/log?topic=:topic&type=:type&initialDate=:initialDate&finalDate=:finalDate&[pageable values]
     *
     * This endpoit allow the user to access all of the logs those are in our database and filter it by some fields
     *
     * @param topic: {@link String} log's topic, it has a value when the log was generated by a kafka message
     * @param type: {@link LogType} log's type, it can be "MESSAGE", when the log was generated by a kafka message,
     *           or "SEARCH", when the log was generated by research on database.
     * @param initialDate: {@link String} search period's start
     * @param finalDate: {@link String} search period's end
     * @param pageable : {@link Pageable} values those will dictate how much data will be returned
     *
     * @return {@link ResponseEntity}<{@link Page}<{@link LogDTO}>>: Page with the filtered data
     * @author Gabriel Guimarães de Almeida
     * */
    @GetMapping
    public ResponseEntity<Page<LogDTO>> filterLog(
            @RequestParam(required = false) String topic, @RequestParam(required = false) LogType type,
            @RequestParam(required = false) String initialDate, @RequestParam(required = false) String finalDate,
            Pageable pageable
    ){
        return ResponseEntity.ok(logService.filter(pageable, topic, type, initialDate, finalDate));
    }
}
